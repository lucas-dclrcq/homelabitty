---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app qbittorrent
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: *app
  values:
    controllers:
      qbittorrent:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: ghcr.io/home-operations/qbittorrent
              tag: 5.1.2@sha256:31ac39705e31f7cdcc04dc46c1c0b0cdf8dc6f9865d4894efc097a33adc41524

            env:
              UMASK: "022"
              QBT_WEBUI_PORT: &port 8080

            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api/v2/app/version
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: {drop: ["ALL"]}
            resources:
              requests:
                cpu: 49m
                memory: 1024Mi
              limits:
                memory: 8192Mi
          portmanager:
            image:
              repository: docker.io/library/alpine
              tag: "3.22"
            command:
              - /bin/sh
              - -c
              - |
                apk add --no-cache libnatpmp curl jq

                PROTON_GW="10.2.0.1"  # WireGuard gateway
                QBIT_API="http://localhost:8080"
                OLD_PORT=0
                while true; do
                  echo "$(date): Requesting port from Proton VPN..."

                  # Request port from Proton (TCP, 60 second lease)
                  PROTON_OUTPUT=$(natpmpc -g $PROTON_GW -a 1 0 tcp 60 2>&1)
                  PORT=$(echo "$PROTON_OUTPUT" | grep "Mapped public port" | awk '{print $4}')

                  if [ -n "$PORT" ] && [ "$PORT" -gt 0 ]; then
                    if [ "$PORT" -ne "$OLD_PORT" ]; then
                      echo "Got port $PORT from Proton"

                      # Also request UDP
                      natpmpc -g $PROTON_GW -a 1 0 udp 60 >/dev/null 2>&1

                      # Update qBittorrent listening port
                      echo "Updating qBittorrent to use port $PORT..."
                      curl -s --data "json={\"listen_port\":$PORT}" \
                        $QBIT_API/api/v2/app/setPreferences

                      echo "Port forward active: $PORT"
                      OLD_PORT=$PORT
                    else
                      echo "Port didn't change"
                    fi
                  else
                    echo "Failed to get port from Proton VPN"
                  fi

                  # Renew every 45 seconds (before 60s timeout)
                  sleep 45
                done

    defaultPodOptions:
      annotations:
        k8s.v1.cni.cncf.io/networks: |-
          [{
            "name": "vpn",
            "namespace": "kube-system",
            "ips": ["192.168.70.10/24"],
            "mac": "32:0b:d8:1f:b6:e4"
          }]
      securityContext:
        runAsNonRoot: true
        runAsUser: ${APP_UID}
        runAsGroup: ${APP_GID}
        fsGroup: ${APP_GID}
        fsGroupChangePolicy: OnRootMismatch
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 15
              preference:
                matchExpressions:
                  - key: "kubernetes.io/hostname"
                    operator: "In"
                    values:
                      - "burrich"

    service:
      app:
        ports:
          http:
            port: *port

    route:
      app:
        annotations:
          gatus.home-operations.com/endpoint: |-
            group: Downloads
        hostnames:
          - "{{ .Release.Name }}.${LIMITED_DOMAIN}"
        parentRefs:
          - name: internal
            namespace: network

        rules:
          - backendRefs:
              - name: *app
                port: *port
    persistence:
      config:
        enabled: true
        existingClaim: qbittorrent
      media:
        type: nfs
        server: "truenas.${INTERNAL_DOMAIN}"
        path: /mnt/tank/Media/Downloads/qbittorrent
        advancedMounts:
          qbittorrent:
            app:
              - path: /media/Downloads/qbittorrent
      tmp:
        type: emptyDir
