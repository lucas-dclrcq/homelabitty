---
# yaml-language-server: $schema=https://kubernetes-schemas.devbu.io/helm.toolkit.fluxcd.io/helmrelease_v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: radarr
  namespace: media
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 1.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 2
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  dependsOn:
    - name: longhorn
      namespace: longhorn-system

  values:
    controller:
      type: statefulset
      annotations:
        reloader.stakater.com/auto: "true"

    image:
      repository: ghcr.io/onedr0p/radarr-develop
      tag: 4.7.2.7686@sha256:4d60d9dd92593fa2c8bf404d06548b1877ed86d63fa622e5e706c07b7a382e4a

    env:
      TZ: "${TIMEZONE}"
      RADARR__INSTANCE_NAME: Radarr
      RADARR__PORT: &port 80
      RADARR__APPLICATION_URL: "https://{{ .Release.Name }}.${SECRET_DOMAIN}"
      RADARR__LOG_LEVEL: info

    envFrom:
      - secretRef:
          name: radarr

    service:
      main:
        ports:
          http:
            port: *port

    probes:
      liveness: &probes
        enabled: true
        custom: true
        spec:
          httpGet:
            path: /ping
            port: *port
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
      readiness: *probes
      startup:
        enabled: false

    ingress:
      main:
        enabled: true
        annotations:
          traefik.ingress.kubernetes.io/router.middlewares: "networking-sso@kubernetescrd"
          external-dns.alpha.kubernetes.io/target: "ingress.${SECRET_DOMAIN}"
          hajimari.io/icon: mdi:filmstrip
        ingressClassName: ingress-traefik
        hosts:
          - host: &host "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - *host

    podSecurityContext:
      runAsUser: 1026
      runAsGroup: 100
      fsGroup: 100
      fsGroupChangePolicy: OnRootMismatch
      supplementalGroups: [10000]

    volumeClaimTemplates:
      - name: config
        mountPath: /config
        accessMode: ReadWriteOnce
        size: 15Gi
        storageClass: longhorn

    persistence:
      media:
        enabled: true
        type: nfs
        server: "nas.${INTERNAL_DOMAIN}"
        path: /volume1/Media
        mountPath: /media

    resources:
      requests:
        cpu: 10m
        memory: 250Mi
      limits:
        memory: 2000Mi
