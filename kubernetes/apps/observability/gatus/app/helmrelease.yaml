---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app gatus
spec:
  interval: 1h
  chartRef:
    kind: OCIRepository
    name: *app
  values:
    controllers:
      gatus:
        strategy: RollingUpdate
        labels:
          postgres: "true"
        annotations:
          reloader.stakater.com/auto: "true"

        initContainers:
          gatus-sidecar:
            image:
              repository: ghcr.io/home-operations/gatus-sidecar
              tag: 0.0.3@sha256:9d227ecdd2b1db04f484c108d58f6defb3f72447c44ddb8f609d2e66f77f52d4
            args:
              - --auto-routes
              - --gateway=external
            resources:
              requests:
                cpu: 10m
              limits:
                memory: 64Mi
            restartPolicy: Always

        containers:
          app:
            image:
              repository: ghcr.io/twin/gatus
              tag: v5.25.2@sha256:9ff09fe5eb5e96b7f2126dc95b375a87a7bc16380d5cb9d798af4e0ef36f0049
            env:
              TZ: ${TIMEZONE}
              GATUS_CONFIG_PATH: /config
              GATUS_DELAY_START_SECONDS: 5
              WEB_PORT: &port 80
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
              limits:
                memory: 256Mi

    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: "${APP_UID}"
        runAsGroup: "${APP_GID}"

    service:
      app:
        controller: *app
        ports:
          http:
            port: *port

    serviceMonitor:
      app:
        endpoints:
          - port: http

    route:
      app:
        hostnames:
          - "{{ .Release.Name }}.${LIMITED_DOMAIN}"
          - "status.${LIMITED_DOMAIN}"
        parentRefs:
          - name: internal
            namespace: network
            sectionName: https
        rules:
          - backendRefs:
              - name: *app
                port: *port

    rbac:
      roles:
        gatus:
          type: ClusterRole
          rules:
            - apiGroups:
                - gateway.networking.k8s.io
              resources:
                - httproutes
              verbs:
                - get
                - watch
                - list
      bindings:
        gatus:
          type: ClusterRoleBinding
          roleRef:
            identifier: gatus
          subjects:
            - identifier: gatus

    serviceAccount:
      gatus:
        enabled: true

    persistence:
      config:
        type: emptyDir
      config-file:
        type: configMap
        name: gatus-config
        globalMounts:
          - path: /config/config.yaml
            subPath: config.yaml
            readOnly: true
