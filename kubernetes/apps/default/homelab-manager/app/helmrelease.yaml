---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2beta1.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: homelab-manager
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.7.1
      interval: 30m
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system

  values:
    controllers:
      main:
        strategy: RollingUpdate
        annotations:
          reloader.stakater.com/auto: "true"

        containers:
          main:
            image:
              repository: ghcr.io/lucas-dclrcq/homelab-manager
              tag: latest@sha256:881f362478110befe62f6f62fd6a360998c7eead79d93221b66527851f78458a

            env:
              QUARKUS_HTTP_PORT: &port 80
              KAFKA_BOOTSTRAP_SERVERS: hoohoot-kafka-bootstrap.kafka.svc.cluster.local:9092
              SCHEMA_REGISTRY_URL: http://schema-registry.kafka.svc.cluster.local:8081

            envFrom:
              - secretRef:
                  name: homelab-manager-secret

            probes:
              liveness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /q/health/live
                    port: *port
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  timeoutSeconds: 10
                  failureThreshold: 3
              readiness:
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /q/health/ready
                    port: *port
                  initialDelaySeconds: 5
                  periodSeconds: 10
                  timeoutSeconds: 10
                  failureThreshold: 3

            resources:
              requests:
                cpu: 12m
                memory: 64M
              limits:
                memory: 512Mi

    service:
      main:
        controller: main
        ports:
          http:
            port: *port

    ingress:
      main:
        className: internal
        hosts:
          - host: &host "{{ .Release.Name }}.${LIMITED_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: main
                  port: http
        tls:
          - hosts:
              - *host
            secretName: "${LIMITED_DOMAIN/./-}-production-tls"
