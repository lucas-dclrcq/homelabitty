name: Mirror docker images

on:
  workflow_dispatch:
  push:
    branches: ["main"]
    paths: ["docker/mirror/**"]

env:
  IMAGE_REGISTRY: ghcr.io

jobs:
  changed-files:
    name: Get Changed Files
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.changed-files.outputs.all_changed_and_modified_files }}
    steps:
      - name: Generate Token
        uses: tibdex/github-app-token@v2
        id: generate-token
        with:
          app_id: "${{ secrets.BOT_APP_ID }}"
          private_key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: "${{ steps.generate-token.outputs.token }}"

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: docker/mirror/**
          dir_names_max_depth: 3
          dir_names: true
          escape_json: false
          json: true
          quotepath: false
          safe_output: false

      - name: List all changed files
        run: echo "${{ steps.changed-files.outputs.all_changed_and_modified_files }}"

  push:
    name: Push
    runs-on: ubuntu-latest
    permissions:
      packages: write
      id-token: write
    needs: ["changed-files"]
    strategy:
      matrix:
        containers: ${{ fromJSON(needs.changed-files.outputs.matrix) }}
      max-parallel: 4
      fail-fast: false
    steps:
      - name: Generate Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: "${{ secrets.BOT_APP_ID }}"
          private-key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: "${{ steps.app-token.outputs.token }}"

      - name: Prepare
        id: prep
        run: |
          container_name=$(basename ${{ matrix.containers }})
          echo "container-name=${container_name}" >> "${GITHUB_OUTPUT}"

          container_image=$(head -1 ./docker/mirror/${container_name}/Dockerfile | sed 's/^FROM //')
          container_version=$(cut -d':' -f2 <<< "${container_image}")
          if [[ "${container_version}" == *sha256 ]]; then
              container_version=$(cut -d'@' -f1 <<< "${container_version}")
          fi
          echo "container-version=${container_version}" >> "${GITHUB_OUTPUT}"

          container_platform=$(cat ./docker/mirror/${container_name}/PLATFORM)
          echo "container-platform=${container_platform}" >> "${GITHUB_OUTPUT}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          build-args: VERSION=${{ steps.prep.outputs.container-version }}
          context: .
          platforms: ${{ steps.prep.outputs.container-platform }}
          file: ./docker/mirror/${{ steps.prep.outputs.container-name }}/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ steps.prep.outputs.container-name }}:${{ steps.prep.outputs.container-version }}
