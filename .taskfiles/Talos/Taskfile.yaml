---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

vars:
  TALHELPER_CLUSTER_DIR: '{{.KUBERNETES_DIR}}/bootstrap/talos/clusterconfig'
  TALHELPER_CONFIG_FILE: '{{.KUBERNETES_DIR}}/bootstrap/talos/talconfig.yaml'
  TALHELPER_SECRET_FILE: '{{.KUBERNETES_DIR}}/bootstrap/talos/talsecret.sops.yaml'
  TALOSCONFIG: '{{.TALHELPER_CLUSTER_DIR}}/talosconfig'

env:
  TALOSCONFIG: '{{.TALOSCONFIG}}'

tasks:

  generate-config:
    desc: Generate Talos configuration
    cmd: talhelper genconfig --config-file {{.TALHELPER_CONFIG_FILE}} --secret-file {{.TALHELPER_SECRET_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}}
    preconditions:
      - test -f {{.TALHELPER_CONFIG_FILE}}
      - test -f {{.SOPS_CONFIG_FILE}}
      - test -f {{.SOPS_AGE_KEY_FILE}}
      - which talhelper

  apply-node:
    desc: Apply Talos config to a node [NODE=required]
    preconditions:
      - which talosctl
      - test -f "${TALOSCONFIG}"
      - talosctl --nodes {{.NODE}} get machineconfig
    requires:
      vars:
        - NODE
    vars:
      FILE:
        sh: ls {{.TALHELPER_CLUSTER_DIR}}/hoohoot-{{.NODE}}.yaml
    cmds:
      - task: _apply-machineconfig
        vars:
          FILENAME: "{{.FILE}}"
          HOSTNAME: "{{.NODE}}"
      - talosctl --nodes {{.NODE}} health

  upgrade-node:
    desc: Upgrade Talos on a single node [NODE=required]
    preconditions:
      - which talosctl
      - test -f "${TALOSCONFIG}"
      - talosctl --nodes {{.NODE}} get machineconfig
    requires:
      vars:
        - NODE
    vars:
      FILE:
        sh: ls {{.TALHELPER_CLUSTER_DIR}}/hoohoot-{{.NODE}}.yaml
      TALOS_IMAGE:
        sh: yq '.machine.install.image' < "{{.FILE}}"
    cmds:
      - talosctl --nodes {{.NODE}} upgrade --image="{{.TALOS_IMAGE}}" --timeout=10m
      - talosctl --nodes {{.NODE}} health

  upgrade-k8s:
    desc: Upgrade Kubernetes
    cmd: talosctl --nodes {{.KUBERNETES_CONTROLLER}} upgrade-k8s --to {{.KUBERNETES_VERSION}}
    vars:
      KUBERNETES_CONTROLLER:
        sh: talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1
      KUBERNETES_VERSION:
        sh: yq '.kubernetesVersion' {{.TALHELPER_CONFIG_FILE}}
    preconditions:
      - curl -fsSL -o /dev/null --fail https://github.com/siderolabs/kubelet/releases/tag/{{.KUBERNETES_VERSION}}
      - talosctl --nodes {{.KUBERNETES_CONTROLLER}} get machineconfig &>/dev/null
      - talosctl config info &>/dev/null
      - test -f {{.TALOSCONFIG}}
      - which talosctl yq

  reset:
    desc: Resets nodes back to maintenance mode
    dir: "{{.KUBERNETES_DIR}}/bootstrap/talos"
    prompt: This will destroy your cluster and reset the nodes back to maintenance mode... continue?
    cmd: talhelper gencommand reset --config-file {{.TALHELPER_CONFIG_FILE}} --out-dir {{.TALHELPER_CLUSTER_DIR}} --extra-flags="--reboot {{- if eq .CLI_FORCE false }} --system-labels-to-wipe STATE --system-labels-to-wipe EPHEMERAL{{ end }} --graceful=false --wait=false" | bash
  preconditions:
    - which talhelper

  down:
    internal: true
    cmd: flux --namespace flux-system suspend kustomization --all
    preconditions:
      - which flux

  up:
    internal: true
    cmd: flux --namespace flux-system resume kustomization --all
    preconditions:
      - which flux


  _apply-machineconfig:
    internal: true
    desc: Apply a single Talos machineConfig to a Talos node
    preconditions:
      - which talosctl
      - test -f "{{.FILENAME}}"
    requires:
      vars:
        - HOSTNAME
        - FILENAME
    vars:
      MODE: '{{.MODE | default "auto"}}'
    cmds:
      - talosctl apply-config
        --nodes "{{.HOSTNAME}}"
        --file "{{.FILENAME}}"
        --mode="{{.MODE}}"
        {{ if eq "true" .INSECURE }}--insecure{{ end }}
        {{ if eq "true" .DRY_RUN }}--dry-run{{ end }}
